name: HANGMAN-GAME - DEFAULT

on:
  schedule:
    - cron: '1 1 1 * *'
  push:
    branches: [ main ]
  pull_request:
    branches: 
      - main

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  BOOST_VERSION: 1.79.0
  APPLICATION_VERSION: 0.1.0
  CPP_COSO_VERSION: 0.2.1
  APPLICATION_NAME: HangmanGame
  DB_POPULATE: CREATE USER odb_test@localhost;CREATE DATABASE odb_test;GRANT ALL PRIVILEGES ON *.* TO odb_test@localhost WITH GRANT OPTION;FLUSH PRIVILEGES;
  DB_USER: root
  DB_PWD: root

permissions: write-all

jobs:

 sonarcloud-analyse:
    env:
      BUILD_TYPE: Debug
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v3
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      if: ${{ github.event_name == 'schedule' }}
      uses: github/codeql-action/init@v2
      with:
        languages: cpp, javascript

    - name: echo g++ version
      run: g++ -v

    - name: clang format
      run: |
        find ./ -regex ".*\.\(h\|c\|cc\|hh\|hxx\|cxx\|hpp\|cpp\)" | xargs clang-format -style=file -i
        
    - name: Save server changes
      if: ${{ github.event_name == 'pull_request' && github.actor != 'dependabot[bot]' }}
      working-directory: ${{github.workspace}}
      run: |
        git stash
        git checkout ${{github.head_ref}}
        git stash pop || echo "Nothing in stashed stack"
        git config user.name "MGuillaumeF"
        git config user.email "${{secrets.EMAIL}}"
        git add server
        git add data-management
        (git commit -m "[AUTO] clang format write" && git push) || echo 'No modification to save'
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

    - name: Install dependencies
      run: |
        sudo add-apt-repository ppa:inkscape.dev/stable
        sudo apt update  
        sudo apt-get install -y gcovr doxygen graphviz clang-tidy clang-format cppcheck odb imagemagick inkscape default-libmysqlclient-dev mysql-common
        # add autoconf-archive for libodb-mysql
    - name: Create icon Server
      working-directory: ${{github.workspace}}/server/resources/icon/hangman-game
      run: |
        dbus-run-session inkscape -w 16 -h 16 --export-type=png --export-filename=hangman-game-16x16.png hangman-game.svg
        dbus-run-session inkscape -w 32 -h 32 --export-type=png --export-filename=hangman-game-32x32.png hangman-game.svg
        dbus-run-session inkscape -w 48 -h 48 --export-type=png --export-filename=hangman-game-48x48.png hangman-game.svg
        dbus-run-session inkscape -w 256 -h 256 --export-type=png --export-filename=hangman-game-256x256.png hangman-game.svg
        # inkscape --export-type=bmp --export-filename=hangman-game.bmp hangman-game.svg
        convert hangman-game-16x16.png hangman-game-32x32.png hangman-game-48x48.png hangman-game-256x256.png hangman-game.ico
    - name: Create icon Data Management
      working-directory: ${{github.workspace}}/data-management/resources/icon/data-management
      run: |
        dbus-run-session inkscape -w 16 -h 16 --export-type=png --export-filename=data-management-16x16.png data-management.svg
        dbus-run-session inkscape -w 32 -h 32 --export-type=png --export-filename=data-management-32x32.png data-management.svg
        dbus-run-session inkscape -w 48 -h 48 --export-type=png --export-filename=data-management-48x48.png data-management.svg
        dbus-run-session inkscape -w 256 -h 256 --export-type=png --export-filename=data-management-256x256.png data-management.svg
        # dbus-run-session inkscape --export-type=bmp data-management.bmp data-management.svg
        convert data-management-16x16.png data-management-32x32.png data-management-48x48.png data-management-256x256.png data-management.ico
    - name: Save icon changes
      if: ${{ github.event_name == 'pull_request' && github.actor != 'dependabot[bot]' }}
      working-directory: ${{github.workspace}}
      run: |
        git stash
        git checkout ${{github.head_ref}}
        git stash pop || echo "Nothing in stashed stack"
        git config user.name "MGuillaumeF"
        git config user.email "${{secrets.EMAIL}}"
        git add server/resources/icon/hangman-game
        git add data-management/resources/icon/data-management
        (git commit -m "[AUTO] update icon generated" && git push) || echo 'No modification to save'
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

    - name: Create reports directory (server)
      run: |
        mkdir ${{github.workspace}}/server/reports
    - name: Create reports directory
      run: mkdir ${{github.workspace}}/data-management/reports

    - name: Generate Model classes
      working-directory: ${{github.workspace}}/data-management/tools/model-generator
      run: |
        npm install
        npm run build
        npm start ../../resources/model.xml
        npm run lint:eslint:json || echo FAILED
    - name: Copy Model classes
      working-directory: ${{github.workspace}}/data-management/tools/model-generator
      run: |
        echo disable temporary
        cp ./dist/ts/model/* ../../../client/src/model
        # rm -rf ../../../client/src/model/*
    - name: Audit dependencies model generator
      working-directory: ${{github.workspace}}/data-management/tools/model-generator
      run: npm audit --json > ./audit-dependency-model-generator-report.json || echo FAILED

    - name: Convert Audit dependencies model generator report
      working-directory: ${{github.workspace}}/data-management/tools/model-generator
      run: ./node_modules/.bin/audiso --input-file=./audit-dependency-model-generator-report.json --output-file ../../reports/audit-model-generator-report.json

    - name: Install boost
      uses: MarkusJx/install-boost@v2.4.0
      id: install-boost
      with:
        platform_version: 20.04 # The images are built on ubuntu 20.04, but this option isn't really required
        boost_version: ${{env.BOOST_VERSION}}
        
    - name: installer odb compiler dependencies
      working-directory: ${{github.workspace}}/data-management/tools/install-odb
      run: npm install

    - name: Audit dependencies installer odb win
      working-directory: ${{github.workspace}}/data-management/tools/install-odb
      run: npm audit --json > ./audit-dependency-install-odb-report.json || echo FAILED

    - name: Convert Audit dependencies installer odb win report
      working-directory: ${{github.workspace}}/data-management/tools/install-odb
      run: ./node_modules/.bin/audiso --input-file=./audit-dependency-install-odb-report.json --output-file ../../reports/audit-install-odb-report.json

    - name: Install lib odb
      working-directory: ${{github.workspace}}/..
      run: |
        git clone https://github.com/Microsoft/vcpkg
        cd vcpkg
        git pull
        ./bootstrap-vcpkg.sh
        ./vcpkg update
        ./vcpkg integrate install
        # ./vcpkg install boost
        ./vcpkg install libodb-sqlite
        #./vcpkg install libodb-mysql
    - name: Generate Model Sources
      working-directory: ${{github.workspace}}/data-management/src/model
      run: |
        mkdir sqlite
        cp ./*.*xx ./sqlite/
        cd sqlite
        odb --database sqlite --generate-query --generate-schema --std c++14 -I${{ steps.install-boost.outputs.BOOST_ROOT }}/include/ *.hxx
        ls -a .
        cd ..
        mkdir mysql
        cp ./*.*xx ./mysql/
        cd mysql
        odb --database mysql --generate-query --generate-schema --std c++14 -I${{ steps.install-boost.outputs.BOOST_ROOT }}/include/ *.hxx
        ls -a .
    # - name: Save model changes
    #   if: ${{ github.event_name == 'pull_request' && github.actor != 'dependabot[bot]' }}
    #   working-directory: ${{github.workspace}}
    #   run: |
    #     git stash
    #     git checkout ${{github.head_ref}}
    #     git stash pop || echo "Nothing in stashed stack"
    #     git config user.name "MGuillaumeF"
    #     git config user.email "${{secrets.EMAIL}}"
    #     git add data-management/src/model
    #     (git commit -m "[AUTO] update model generated" && git push) || echo 'No modification to save'
    #   env:
    #     GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

    - name: Start MySQL server
      run: sudo service mysql start 

    - name: Update Database schema
      run: sudo mysql -e '${{env.DB_POPULATE}}' --user=${{env.DB_USER}} --password=${{env.DB_PWD}}

    - name: Update Database schema
      working-directory: ${{github.workspace}}/data-management/src/model/mysql
      run:  mysql --user=odb_test --database=odb_test < user.sql

    - name: Download cpp-coso ${{env.CPP_COSO_VERSION}}
      uses: wei/wget@v1
      with:
        args: -O cpp-coso-${{env.CPP_COSO_VERSION}}-Linux.deb https://mguillaumef.github.io/cpp-coso/delivery/${{env.CPP_COSO_VERSION}}/cpp-coso-${{env.CPP_COSO_VERSION}}-Linux.deb

    - name: Install cpp-coso
      run: sudo dpkg -i cpp-coso-${{env.CPP_COSO_VERSION}}-Linux.deb

    - name: Generate target
      run: cmake -S ${{github.workspace}} -B ${{github.workspace}}/bin -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_CXX_USE_RESPONSE_FILE_FOR_INCLUDES=OFF -DCMAKE_CXX_COMPILER=g++ -DCMAKE_C_COMPILER=gcc  -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/../vcpkg/scripts/buildsystems/vcpkg.cmake
      env:
        BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

    - name: Build server
      working-directory: ${{github.workspace}}
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/bin
  
    - name: Lint Cpp Check (server)
      run: cppcheck --enable=all --language=c++ --std=c++20 --xml --verbose --output-file=${{github.workspace}}/server/reports/cppcheck_report.xml --project=${{github.workspace}}/bin/compile_commands.json ${{github.workspace}}/server
      # --suppress=*:${{github.workspace}}/data-management/*

    - name: Lint Cpp Check (data-management)
      run: cppcheck --enable=all --language=c++ --std=c++14 --xml --verbose --output-file=${{github.workspace}}/data-management/reports/cppcheck_report.xml --project=${{github.workspace}}/bin/compile_commands.json ${{github.workspace}}/data-management
      # --suppress=*:${{github.workspace}}/server/*

    - name: Lint Clang-Tidy (data-management)
      run: clang-tidy -checks='*,-modernize-use-trailing-return-type,-llvm-header-guard,-fuchsia-default-arguments-calls,-fuchsia-default-arguments-declarations' -header-filter='data-management/src/.*' -p bin data-management/**/*.*pp > ${{github.workspace}}/data-management/reports/clang_tidy_report.txt || echo 'FAILED'

    - name: Convert Lint Clang-Tidy to sonarqube format (data-management)
      run: /usr/cpp-coso/cpp-coso clang-tidy ${{github.workspace}}/data-management/reports/clang_tidy_report.txt ${{github.workspace}}/data-management/reports/clang-tidy-sonarqube-report.json

    - name: Convert Lint Cpp Check to sonarqube format
      run: /usr/cpp-coso/cpp-coso cppcheck ${{github.workspace}}/server/reports/cppcheck_report.xml ${{github.workspace}}/server/reports/cppcheck-sonarqube-report.json

    - name: Convert Lint Cpp Check to sonarqube format (data-management)
      run: /usr/cpp-coso/cpp-coso cppcheck ${{github.workspace}}/data-management/reports/cppcheck_report.xml ${{github.workspace}}/data-management/reports/cppcheck-sonarqube-report.json

    - name: Archive data-management report
      uses: actions/upload-artifact@v3
      with:
        name: Data-Management-Hangman-Game - Reports
        path: ${{github.workspace}}/data-management/reports

    - name: Lint Clang-Tidy
      run: clang-tidy -checks='*,-modernize-use-trailing-return-type,-llvm-header-guard,-fuchsia-default-arguments-calls,-fuchsia-default-arguments-declarations' -header-filter='server/src/.*' -p server/bin server/**/*.*pp > ${{github.workspace}}/server/reports/clang_tidy_report.txt || echo "raised error"

    - name: Convert Lint Clang-Tidy to sonarqube format
      run: /usr/cpp-coso/cpp-coso clang-tidy ${{github.workspace}}/server/reports/clang_tidy_report.txt ${{github.workspace}}/server/reports/clang-tidy-sonarqube-report.json

    - name: Unit Tests Graph
      working-directory: ${{github.workspace}}
      run: |
        cd ${{github.workspace}}/bin/server/bin
        ./HangmanGameTest --list_content=DOT > ${{github.workspace}}/server/reports/content.dot 2>&1
        dot ${{github.workspace}}/server/reports/content.dot -Tsvg -o ${{github.workspace}}/wiki/server-ut-tests.svg
        cd ${{github.workspace}}/bin/data-management/bin
        ./HangmanGame-data-management-sqlite-unit-tests --list_content=DOT > ${{github.workspace}}/data-management/reports/content.dot 2>&1
        dot ${{github.workspace}}/data-management/reports/content.dot -Tsvg -o ${{github.workspace}}/wiki/data-management-ut-tests.svg
        dot ${{github.workspace}}/wiki/components.dot -Tsvg -o ${{github.workspace}}/wiki/components-diagram.svg
    - name: Save tests graph
      if: ${{ github.event_name == 'pull_request' && github.actor != 'dependabot[bot]' }}
      working-directory: ${{github.workspace}}
      run: |
        git stash
        git checkout ${{github.head_ref}}
        git stash pop || echo "Nothing in stashed stack"
        git config user.name "MGuillaumeF"
        git config user.email "${{secrets.EMAIL}}"
        git add wiki
        (git commit -m "[AUTO] update test unit test graph generated" && git push) || echo 'No modification to save'
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
   
    - name: Server Tests ctest
      working-directory: ${{github.workspace}}/server/test
      run: |
        npm install
        chmod +x ./run-tests.mjs
        node run-tests.mjs
    # - name: Generate Unit Tests HTML report
    #   working-directory: ${{github.workspace}}/server/bin/CMakeFiles/HangmanGameTest.dir/src
    #   run: gcovr --root ${{github.workspace}}/server/src --html-details ${{github.workspace}}/server/reports/HangmanGameUnitTestReport.html --html-title "HangmanGame Server Coverage report" ${{github.workspace}}/server/bin/CMakeFiles/HangmanGameTest.dir/src
      
    # - name: Generate Integration Tests HTML report
    #   working-directory: ${{github.workspace}}/server/bin/CMakeFiles/HangmanGame.dir/src
    #   run: gcovr --root ${{github.workspace}}/server/src --html-details ${{github.workspace}}/server/reports/HangmanGameIntegrationTestReport.html --html-title "HangmanGame Server Coverage report" ${{github.workspace}}/server/bin/CMakeFiles/HangmanGame.dir/src

    - name: gcov after test
      if: github.actor != 'dependabot[bot]'
      working-directory: ${{github.workspace}}/bin
      run: |
        find -name '*.gcda' | xargs gcov --preserve-paths
        cd ..
        mkdir ./server/bin
        mkdir ./server/bin/coverage
        mkdir ./data-management/bin
        mkdir ./data-management/bin/coverage
        find . -name \*.gcov -exec cp {} ./server/bin/coverage \;
        find . -name \*.gcov -exec cp {} ./data-management/bin/coverage \;
    - name: Convert Boost Tests UT reports to sonarqube format
      run: /usr/cpp-coso/cpp-coso boost-test ${{github.workspace}}/server/reports/reportUT.xml ${{github.workspace}}/server/reports/logUT.xml ${{github.workspace}}/server/reports/boost-test-sonarqube-report-UT.xml

    - name: Convert Boost Tests IT reports to sonarqube format
      run: /usr/cpp-coso/cpp-coso boost-test ${{github.workspace}}/server/reports/reportIT.xml ${{github.workspace}}/server/reports/logIT.xml ${{github.workspace}}/server/reports/boost-test-sonarqube-report-IT.xml

    - name: Convert Boost Tests UT reports to sonarqube format (data-management)
      run: /usr/cpp-coso/cpp-coso boost-test ${{github.workspace}}/data-management/reports/reportUT.xml ${{github.workspace}}/data-management/reports/logUT.xml ${{github.workspace}}/data-management/reports/boost-test-sonarqube-report-UT.xml

    - name: Archive Test report - Server
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: Server-Hangman-Game - Reports
        path: ${{github.workspace}}/server/reports

    - name: Archive Test report - Data-Management
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: Data-Management-Hangman-Game - Reports
        path: ${{github.workspace}}/data-management/reports
        
    - name: Generate Swagger UI
      uses: Legion2/swagger-ui-action@v1
      with:
        output: ${{github.workspace}}/api-docs
        spec-file: ${{github.workspace}}/server/docs/api_doc.json

    - name: Archive Swagger UI
      uses: actions/upload-artifact@v3
      with:
        name: API-Docs-Hangman-Game
        path: ${{github.workspace}}/api-docs

    - name: Doxygen Docs
      run: doxygen docg.conf

    - name: Archive Docs
      uses: actions/upload-artifact@v3
      with:
        name: Docs-Hangman-Game
        path: ${{github.workspace}}/docs

    - name: Install client's dependencies
      working-directory: ${{github.workspace}}/client
      run: npm install

    - name: Update Browserlist
      working-directory: ${{github.workspace}}/client
      run: npx browserslist@latest --update-db

    - name: Prettier format
      if: ${{ github.event_name == 'pull_request' && github.actor != 'dependabot[bot]' }}
      working-directory: ${{github.workspace}}/client
      run: npm run prettier --config ./.prettierrc

    - name: Save client changes
      if: ${{ github.event_name == 'pull_request' && github.actor != 'dependabot[bot]' }}
      working-directory: ${{github.workspace}}
      run: |
        git stash
        git checkout ${{github.head_ref}}
        git stash pop
        git config user.name "MGuillaumeF"
        git config user.email "${{secrets.EMAIL}}"
        git add .
        (git commit -m "[AUTO] prettier format write" && git push) || echo 'No modification to save'
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

    - name: Perform CodeQL Analysis
      if: ${{ github.event_name == 'schedule' }}
      uses: github/codeql-action/analyze@v2

    - name: Client tests
      run: npm run cy:run

    - name: ESlint analyze json
      run: npm run lint:eslint:json || echo FAILED

    - name: ESlint analyze html
      run: npm run lint:eslint || echo FAILED

    - name: Copy reports
      if: always()
      run: |
        tree cypress
        mkdir -p ./dist/cypress-reports
        cp -R ./cypress/reports ./dist/cypress-reports

    - name: Audit dependencies client
      working-directory: ${{github.workspace}}/client
      run: npm audit --json > ./dist/reports/audit-dependency-report.json || echo FAILED

    - name: Convert Audit dependencies client report
      working-directory: ${{github.workspace}}/client
      run: ./node_modules/.bin/audiso --input-file=./dist/reports/audit-dependency-report.json --output-file ./dist/reports/audit-report.json

    - name: Archive Analyses reports
      uses: actions/upload-artifact@v3
      with:
        name: IHM-Hangman-Game-Analyses-report
        path: ${{github.workspace}}/dist

    - name: Setup sonarqube
      if: github.actor != 'dependabot[bot]'
      uses: warchant/setup-sonar-scanner@v4

    - name: Run SonarQube full
      working-directory: ${{github.workspace}}
      if: github.actor != 'dependabot[bot]'
      env:
        GITHUB_TOKEN: ${{ secrets.SONAR_REPO_ACCESS_TOKEN }}
      run: sonar-scanner
        -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
        -Dsonar.verbose=false
        -Dsonar.branch.name=branch-full

    - name: Run SonarQube
      if: github.actor != 'dependabot[bot]'
      env:
        GITHUB_TOKEN: ${{ secrets.SONAR_REPO_ACCESS_TOKEN }}
      run: sonar-scanner
        -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
        -Dsonar.verbose=false
